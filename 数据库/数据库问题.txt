1、数据库事务ACID的介绍？
A:原子性：事务操作要么全部成功，要么全部失败回滚
C:一致性：事务必须使数据从一个一致性状态换到另一个一致性状态，就是说一个事务执行之前和执行之后都必须处于一致性状态
I:隔离性：当多个用户并发访问数据库时，数据库为每个用户开启的事务不能被其他事务操作所干扰，多个并发事务之间要相互隔离
D:持久性：一个事务一旦被提交了，那么对数据库中的数据的改变及时永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。

2、ACID底层是咋实现的？
事务的原子性是通过undolog来实现的。
事务的持久性性是通过redolog来实现的。
事务的隔离性是通过(读写锁+MVCC)来实现的。
事务的一致性是通过原子性，持久性，隔离性来实现的。

首先说一下，所谓回滚操作就是当发生错误异常或者显示的执行rollback语句时候，需要把数据还原到原先的模样。所以这时候也就需要用到 undo log 来进行回滚，接下来看一下 undo log 在实现事务原子性时怎么发挥作用的。
undo log 生成：
（1）每条数据变更（insert/update/delete）操作都伴随一跳undo log的生成，并且回滚日志必须先于数据持久化到磁盘。
（2）所谓的回滚就是根据回滚日志做逆向操作，比如 delete 的逆向操作为 insert ，insert的逆向操作为delete，update的逆向为update等。
根据 undo log 进行回滚 ：
为了做到同时成功或者失败，当系统发生错误或者执行 rollback 操作时需要根据 undo log 进行回滚。
回滚操作就是要还原到原来的状态，undo log记录了数据被修改前的信息以及新增和被删除的数据信息，根据undo log生成回滚语句，比如：
(1) 如果在回滚日志里有新增数据记录，则生成删除该条的语句
(2) 如果在回滚日志里有删除数据记录，则生成生成该条的语句
(3) 如果在回滚日志里有修改数据记录，则生成修改到原先数据的语句

第二小节：持久性的实现
先了解一下MySQL的数据存储机制，MySQL的表数据是存放在磁盘上的，因此想要存取的时候都要经历磁盘 IO,然而即使是使用 SSD 磁盘 IO 也是非常消耗性能的。为此，为了提升性能 InnoDB 提供了缓冲池(Buffer Pool)，Buffer Pool 中包含了磁盘数据页的映射，可以当做缓存来使用：
读数据：会首先从缓冲池中读取，如果缓冲池中没有，则从磁盘读取在放入缓冲池；
写数据：会首先写入缓冲池，缓冲池中的数据会定期同步到磁盘中；
上面这种缓冲池的措施虽然在性能方面带来了质的飞跃，但是它也带来了新的问题，当MySQL系统宕机，断电的时候可能会丢数据！！！
因为我们的数据已经提交了，但此时是在缓冲池里头，还没来得及在磁盘持久化，所以我们急需一种机制需要存一下已提交事务的数据，为恢复数据使用。
于是 redo log就派上用场了。
既然redo log也需要存储，也涉及磁盘IO为啥还用它？
（1）redo log 的存储是顺序存储，而缓存同步是随机操作。
（2）缓存同步是以数据页为单位的，每次传输的数据大小大于redo log。
https://www.jianshu.com/p/1531f53ed861
3、mysql各种锁？
https://blog.csdn.net/M_Jack/article/details/84680405



